<template>
    <k-toolbar-item name="kytos-telemetry_int-k-toolbar-main" icon="chart-line" tooltip="Telemetry INT">
        <k-accordion>
            <k-accordion-item title="List EVCs">
                <k-button icon="plug" title="List Installed EVCs" @click="get_EVCs">
                </k-button>
            </k-accordion-item>
            <k-accordion-item title="List Proxy Ports">
                <k-button icon="plug" title="List Proxy Ports" @click="get_proxy_ports">
                </k-button>
            </k-accordion-item>
        </k-accordion>
    </k-toolbar-item>
</template>
<script>
module.exports = {
    data: function() {
        return {
            telemetryINT_Data: [],
            proxy_ports: [],
        }
    },
    mounted() {
      this.$kytos.eventBus.$on('kytos/telemetry_int/refetch-proxy-ports', this.get_proxy_ports)
    },
    methods: {
        //API request for EVC data
        get_EVCs() {
            this.$http.get(this.$kytos_server_api + "kytos/mef_eline/v2/evc/")
            .then(response => {
              this.extract_TelemetryINTData(response.data)
              this.display_InfoPanel()
            })
            .catch(error => {
              this.$http_helpers.post_error(this, error, 'Could not retrieve EVCs');
            })
        },
        //API request for getting Proxy Ports
        get_proxy_ports() {
            this.$http.get(this.$kytos_server_api + "kytos/telemetry_int/v1/uni/proxy_port")
            .then(response => {
              this.set_proxy_ports(response.data)
              this.display_proxy_port_info_panel()
            })
            .catch(error => {
              this.$http_helpers.post_error(this, error, 'Could not retrieve proxy ports');
            })
        },
        set_proxy_ports(data){
            this.proxy_ports = data.map((obj) => 
              (
                {
                  uni_id: obj.uni.id,
                  uni_status: obj.uni.status,
                  uni_status_reason: obj.uni.status_reason.join(",") || "N/A",
                  proxy_port_port_number: obj.proxy_port.port_number,
                  proxy_port_status: obj.proxy_port.status,
                  proxy_port_status_reason: obj.proxy_port.status_reason.join(",") || "N/A"
                }
              )
            )
        },
        /**
         * @param {Object} EVC_Data - The EVC data from mef_eline.
         * @description Extracts only the required information for the telemetry_int table from the mef_eline EVC data.
         */
        extract_TelemetryINTData(EVC_Data) {
            this.telemetryINT_Data = []
            for (let EVC in EVC_Data) {
                let EVC_Obj = {}
                EVC_Obj["active"] = EVC_Data[EVC].active
                EVC_Obj["id"] = EVC_Data[EVC].id
                EVC_Obj["name"] = EVC_Data[EVC].name
                if (EVC_Data[EVC].metadata?.telemetry) {
                    EVC_Obj["enabled"] = EVC_Data[EVC].metadata.telemetry.enabled.toString()
                    EVC_Obj["status"] = EVC_Data[EVC].metadata.telemetry.status
                    EVC_Obj["status_reason"] = this.splitStatusReasons(EVC_Data[EVC].metadata.telemetry.status_reason)
                    EVC_Obj["status_updated_at"] = EVC_Data[EVC].metadata.telemetry.status_updated_at
                } else {
                    EVC_Obj["enabled"] = "N/A"
                    EVC_Obj["status"] = "N/A"
                    EVC_Obj["status_reason"] = "N/A"
                    EVC_Obj["status_updated_at"] = "N/A"
                }
                this.telemetryINT_Data.push(EVC_Obj)
            }
        },
        /**
         * @event showInfoPanel
         * @param {Object} telemetryINT_Data - Data specific to telemetry_int extracted from mef_eline EVC data.
         * @description Displays info panel when the "List Installed EVCs" button is clicked.
         */
        display_InfoPanel() {
            var content = {
                          "component": 'kytos-telemetry_int-k-info-panel-show_telemetry_int_data',
                          "content": this.telemetryINT_Data,
                          "icon": "info-circle",
                          "title": "View Telemetry INT Data",
                          "subtitle": "by kytos/telemetry_int"
                          }
            this.$kytos.eventBus.$emit("showInfoPanel", content)
        },
        // Display list_proxy_ports k-info-panel
        display_proxy_port_info_panel() {
            const content = {
                          "component": 'kytos-telemetry_int-k-info-panel-list_proxy_ports',
                          "content": this.proxy_ports,
                          "icon": "info-circle",
                          "title": "Proxy Ports",
                          "subtitle": "by kytos/telemetry_int"
                          }
            this.$kytos.eventBus.$emit("showInfoPanel", content)
        },
        //Formats status reason data for table
        splitStatusReasons(statusReasons) {
            return statusReasons.toString()
        }
    }
}
</script>
